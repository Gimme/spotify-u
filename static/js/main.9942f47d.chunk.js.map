{"version":3,"sources":["logo.svg","utils/history.tsx","spotifyAPI/AuthService.tsx","spotifyAPI/SpotifyAccess.tsx","components/utils/Delayed.tsx","components/DelayedCircularProgress.tsx","components/utils/VirtualizedList.tsx","components/utils/InfiniteLoaderList.tsx","components/Playlists.tsx","pages/MainPage.tsx","pages/LoadingPage.tsx","themes/darkTheme.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","history","createHashHistory","cookies","Cookies","validateAccessToken","fetchAccessToken","accessToken","get","undefined","Promise","resolve","string","parsed","queryString","parse","window","location","search","access_token","refresh_token","expires_in","rest","searchRest","replaceState","href","replace","consumeSearchParams","stringify","hash","consumeAccessTokenParams","updateTokenCookies","generateNewAccessTokenFromSpotify","refreshAccessToken","refreshToken","console","log","fetch","refresh_token_uri","then","response","json","data","push","backend_uri","set","path","maxAge","expirationTime","minDurationBeforeRefresh","getTracks","playlist","appendTracksFromOffset","offset","tracks","fetchFromSpotifyAPI","id","limit","concat","items","next","queryParams","promise","headers","Authorization","processResponse","statusCode","status","all","remove","Delayed","props","useState","hidden","setHidden","useEffect","timeout","setTimeout","wait","clearTimeout","children","DelayedCircularProgress","CircularProgress","renderRow","content","index","style","item","loaded","isItemLoaded","isLoading","ListItem","height","key","Box","justifyContent","width","display","button","selected","selectedIndex","onClick","onItemClick","ListItemText","primaryTypographyProps","noWrap","primary","getText","VirtualizedList","setSelectedIndex","alreadySelected","onItemSelected","itemData","itemSize","itemCount","length","onItemsRendered","ref","reff","InfiniteLoaderList","hasNextPage","loadMoreItems","isNextPageLoading","loadNextPage","useStyles","makeStyles","theme","root","minWidth","spacing","margin","backgroundColor","palette","grey","header","color","main","alignItems","paddingLeft","Playlists","classes","playlists","setPlaylists","skippedPlaylists","setSkippedPlaylists","userId","setUserId","setIsNextPageLoading","setHasNextPage","loadMorePlaylistsWithUserId","filteredData","filter","owner","Paper","elevation","className","Divider","name","onPlaylistSelected","app","paddingTop","sideBar","maxWidth","MainPage","song","setSong","setPlaylist","setCurrentlyPlayingSong","result","src","images","url","alt","logo","variant","Button","LoadingPage","darkTheme","createMuiTheme","type","background","default","lightBlue","secondary","green","800","900","App","setInterval","accessTokenRefreshInterval","ThemeProvider","CssBaseline","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9942f47d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createHashHistory } from \"history\";\r\n\r\nconst history = createHashHistory();\r\nexport default history;\r\n\r\n/**\r\n * Removes the search params not present in the searchRest.\r\n * @param searchRest the rest string of the unconsumed search params\r\n */\r\nexport const consumeSearchParams = (searchRest: string): void => {\r\n  window.history.replaceState(\r\n    null,\r\n    \"\",\r\n    window.location.href.replace(\r\n      window.location.search,\r\n      (searchRest !== \"\" ? \"?\" : \"\") + searchRest\r\n    )\r\n  );\r\n};\r\n","import queryString from \"query-string\";\r\nimport Cookies from \"universal-cookie\";\r\nimport history, { consumeSearchParams } from \"../utils/history\";\r\n\r\nlet accessTokenRefreshInterval = 1; // Minutes\r\nlet minDurationBeforeRefresh = 15; // Minutes\r\nlet expirationTime = 60; // Minutes\r\n\r\nconst overrideUseProductionBackend = true;\r\nconst backend_uri =\r\n  process.env.NODE_ENV === \"production\" || overrideUseProductionBackend\r\n    ? \"https://spotify-u-backend.herokuapp.com\"\r\n    : \"http://localhost:8888\";\r\nlet authentication_uri = backend_uri + \"/login\";\r\nlet refresh_token_uri = backend_uri + \"/refresh_token\";\r\n\r\nlet accessTokenKey = \"access_token\";\r\nlet refreshTokenKey = \"refresh_token\";\r\nlet recentRefreshKey = \"recently_refreshed_access_token\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n/**\r\n * Starts an task to refresh the Spotify access token every 10 minutes;\r\n */\r\nexport const startAccessTokenRefreshInterval = (): void => {\r\n  refreshAccessToken();\r\n  window.setInterval(() => {\r\n    refreshAccessToken();\r\n  }, accessTokenRefreshInterval * 60 * 1000);\r\n};\r\n\r\n/**\r\n * Fetches a new access token from Spotify.\r\n */\r\nexport const validateAccessToken = (): void => {\r\n  fetchAccessToken();\r\n};\r\n\r\n/**\r\n * Returns a promise of an access token if one is found, otherwise generates a new one from Spotify.\r\n *\r\n * Access token search order:\r\n * 1. Cookie\r\n * 2. Parse from address field\r\n * 3. Generate new from Spotify\r\n */\r\nexport const fetchAccessToken = (): Promise<string> | null => {\r\n  // Get from cookie\r\n  let accessToken: string = cookies.get(accessTokenKey);\r\n  if (accessToken !== undefined) {\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Parse from address field\r\n  let parsed = consumeAccessTokenParams();\r\n  accessToken = parsed.access_token;\r\n  if (!isNullOrEmpty(accessToken)) {\r\n    // Add new cookie with the parsed access token\r\n    updateTokenCookies(accessToken, parsed.refresh_token);\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Generate new from Spotify\r\n  generateNewAccessTokenFromSpotify();\r\n  return null;\r\n};\r\n\r\n/**\r\n * Generate new access token from Spotify.\r\n */\r\nexport const invalidateAccessToken = (): void => {\r\n  cookies.remove(accessTokenKey);\r\n  generateNewAccessTokenFromSpotify();\r\n};\r\n\r\n/**\r\n * Refreshes the access token by passing the refresh token to the backend.\r\n * Returns a promise of with the refreshed access token (the same access token\r\n * that the refresh token was originally generated for).\r\n */\r\nexport const refreshAccessToken = (): void => {\r\n  // Don't refresh again if done recently\r\n  if (cookies.get(recentRefreshKey) !== undefined) return;\r\n\r\n  let refreshToken = cookies.get(refreshTokenKey);\r\n  if (refreshToken === undefined) return;\r\n\r\n  console.log(\"Refreshing access token...\");\r\n\r\n  fetch(refresh_token_uri + \"?refresh_token=\" + refreshToken)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(\"Refreshed access token\");\r\n\r\n      let accessToken = data.access_token;\r\n      updateTokenCookies(accessToken, refreshToken);\r\n    });\r\n};\r\n\r\n/**\r\n * Generates a new access token by redirecting to Spotify's authentication page.\r\n */\r\nfunction generateNewAccessTokenFromSpotify(): void {\r\n  history.push(\"/loading\");\r\n  window.location.replace(authentication_uri);\r\n}\r\n\r\ninterface AccessTokenParams {\r\n  access_token: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n}\r\n\r\n/**\r\n * Returns the access token parsed from the address field.\r\n */\r\nfunction consumeAccessTokenParams(): AccessTokenParams {\r\n  let { access_token, refresh_token, expires_in, ...rest } = queryString.parse(\r\n    window.location.search\r\n  );\r\n  consumeSearchParams(queryString.stringify(rest));\r\n  // Remove the hash that is sometimes appended on the callback\r\n  window.location.hash = window.location.hash.replace(\"_=_\", \"\");\r\n  return {\r\n    access_token: access_token as string,\r\n    expires_in: (expires_in as unknown) as number,\r\n    refresh_token: refresh_token as string,\r\n  };\r\n}\r\n\r\n/**\r\n * Updates the access/refresh token values stored in the cookies.\r\n *\r\n * @param accessToken The access token value to set\r\n * @param refreshToken The refresh token value to set\r\n */\r\nfunction updateTokenCookies(accessToken: string, refreshToken: string): void {\r\n  cookies.set(accessTokenKey, accessToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(refreshTokenKey, refreshToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(recentRefreshKey, \"\", {\r\n    path: \"/\",\r\n    maxAge: minDurationBeforeRefresh * 60,\r\n  });\r\n}\r\n\r\n/**\r\n * Returns if the specified string is undefined, null or empty.\r\n *\r\n * @param string The string to check\r\n */\r\nfunction isNullOrEmpty(string: string): boolean {\r\n  return string === undefined || string === null || string === \"\";\r\n}\r\n","import { fetchAccessToken, invalidateAccessToken } from \"./AuthService\";\r\nimport queryString from \"query-string\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport Track from \"../interfaces/Track\";\r\n\r\n/**\r\n * Returns the user ID of the current user.\r\n */\r\nexport const getUserId = (): Promise<string | null> => {\r\n  return fetchFromSpotifyAPI(\"me\").then((data) => {\r\n    if (!data) return null;\r\n    return data.id;\r\n  });\r\n};\r\n\r\n/**\r\n * Returns the currently playing song, or null.\r\n */\r\nexport const getSong = (): Promise<string | null> => {\r\n  return fetchFromSpotifyAPI(\"me/player/currently-playing\").then((data) => {\r\n    if (!data || !data.item) return null;\r\n    return data.item.name;\r\n  });\r\n};\r\n\r\n/**\r\n * Returns all tracks from the specified playlist.\r\n *\r\n * @param playlistId The playlist to get the tracks of\r\n */\r\nexport const getTracks = (playlist: Playlist): Promise<Track[] | null> => {\r\n  return appendTracksFromOffset(playlist, 0, []);\r\n};\r\n\r\n/**\r\n * Appends all tracks in the specified playlist, starting from the specified offset, to the specified tracks array.\r\n *\r\n * @param playlist The playlist to get the tracks of\r\n * @param offset The offset to start from\r\n * @param tracks The array to append the tracks to\r\n */\r\nfunction appendTracksFromOffset(\r\n  playlist: Playlist,\r\n  offset: number,\r\n  tracks: Track[]\r\n): Promise<Track[] | null> {\r\n  let limit = 100;\r\n\r\n  return fetchFromSpotifyAPI(`playlists/${playlist.id}/tracks`, {\r\n    limit: limit,\r\n    offset: offset,\r\n  }).then((data: TracksResponse | null) => {\r\n    if (!data) return null;\r\n\r\n    tracks = tracks.concat(data.items);\r\n\r\n    if (!data.next) return Promise.resolve(tracks);\r\n    return appendTracksFromOffset(playlist, offset + limit, tracks);\r\n  });\r\n}\r\n\r\n/**\r\n * The response data when fetching tracks.\r\n */\r\ninterface TracksResponse {\r\n  items: Track[];\r\n  next: string;\r\n}\r\n\r\n/**\r\n * Returns a list of the playlists owned or followed by the Spotify user.\r\n *\r\n * @param limit The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.\r\n * @param offset The index of the first playlist to return. Default: 0 (the first object).\r\n * Maximum offset: 100.000. Use with limit to get the next set of playlists.\r\n */\r\nexport const getPlaylists = (\r\n  limit?: number,\r\n  offset?: number\r\n): Promise<{ items: Playlist[] } | null> => {\r\n  return fetchFromSpotifyAPI(\"me/playlists\", {\r\n    limit: limit,\r\n    offset: offset,\r\n  }).then((data) => {\r\n    if (!data) return null;\r\n    return data;\r\n  });\r\n};\r\n\r\nfunction fetchFromSpotifyAPI(\r\n  path: string,\r\n  queryParams?: object\r\n): Promise<any | null> {\r\n  let promise = fetchAccessToken();\r\n  if (promise === null) return Promise.resolve(null);\r\n\r\n  return promise\r\n    .then((accessToken) => {\r\n      return fetch(\r\n        \"https://api.spotify.com/v1/\" +\r\n          path +\r\n          (queryParams ? \"?\" + queryString.stringify(queryParams) : \"\"),\r\n        {\r\n          headers: { Authorization: \"Bearer \" + accessToken },\r\n        }\r\n      );\r\n    })\r\n    .then(processResponse);\r\n}\r\n\r\nfunction processResponse(response: {\r\n  status: any;\r\n  json: () => any;\r\n}): Promise<any | null> {\r\n  const statusCode = response.status;\r\n  if (statusCode === 204) return Promise.resolve(null);\r\n  const data = response.json();\r\n  return Promise.all([statusCode, data]).then(([statusCode, data]) => {\r\n    if (statusCode === 401) {\r\n      // Invalid access token\r\n      invalidateAccessToken();\r\n      return null;\r\n    }\r\n\r\n    return statusCode === 200 ? data : null;\r\n  });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  wait: number;\r\n}\r\n\r\n/**\r\n * Hides the children until the specified wait (ms) duration is over.\r\n */\r\nconst Delayed: React.FC<Props> = (props) => {\r\n  const [hidden, setHidden] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setHidden(false);\r\n    }, props.wait);\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  return hidden ? null : <>{props.children}</>;\r\n};\r\n\r\nexport default Delayed;\r\n","import React from \"react\";\r\nimport Delayed from \"./utils/Delayed\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nexport default function DelayedCircularProgress() {\r\n  return (\r\n    <Delayed wait={500}>\r\n      <CircularProgress />\r\n    </Delayed>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../../App.scss\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport DelayedCircularProgress from \"../DelayedCircularProgress\";\r\n\r\ninterface RowProps<T> {\r\n  index: number;\r\n  style: React.CSSProperties | undefined;\r\n  data: {\r\n    selectedIndex: number;\r\n    onItemClick: (item: T, index: number) => void;\r\n    items: T[];\r\n    getText: (t: T) => string;\r\n    isLoading?: boolean;\r\n    isItemLoaded?: (index: number) => boolean;\r\n  };\r\n}\r\n\r\nfunction renderRow<T>(props: RowProps<T>) {\r\n  const { index, style } = props;\r\n  const item = props.data.items[index];\r\n\r\n  const loaded: boolean =\r\n    !props.data.isItemLoaded || props.data.isItemLoaded(index);\r\n\r\n  const loading: boolean = !!props.data.isLoading && props.data.isLoading;\r\n\r\n  let content;\r\n  if (loading) {\r\n    content = (\r\n      <ListItem style={{ height: 56 }} key={index}>\r\n        <Box justifyContent=\"center\" width=\"100%\" display=\"flex\">\r\n          <DelayedCircularProgress />\r\n        </Box>\r\n      </ListItem>\r\n    );\r\n  } else if (!loaded) {\r\n    content = null;\r\n  } else {\r\n    content = (\r\n      <ListItem\r\n        button\r\n        key={index}\r\n        selected={props.data.selectedIndex === index}\r\n        onClick={() => {\r\n          if (props.data.onItemClick && item)\r\n            props.data.onItemClick(item, index);\r\n        }}\r\n      >\r\n        <ListItemText\r\n          primaryTypographyProps={{ noWrap: true }}\r\n          primary={props.data.getText(item)}\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  return <div style={style}>{content}</div>;\r\n}\r\n\r\ninterface Props<T> {\r\n  height: number;\r\n  itemSize: number;\r\n  items: T[];\r\n  getText: (item: T) => string;\r\n  itemCount?: number;\r\n  onItemSelected?: (item: T, index: number) => void;\r\n  onItemClick?: (item: T, index: number) => void;\r\n  onItemsRendered?: any;\r\n  reff?: any;\r\n  isLoading?: boolean;\r\n  isItemLoaded?: (index: number) => boolean;\r\n}\r\n\r\nfunction VirtualizedList<T>(props: Props<T>) {\r\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n\r\n  const onItemClick = (item: T, index: number) => {\r\n    let alreadySelected = index === selectedIndex;\r\n    setSelectedIndex(index);\r\n    if (props.onItemClick) props.onItemClick(item, index);\r\n    if (!alreadySelected && props.onItemSelected)\r\n      props.onItemSelected(item, index);\r\n  };\r\n\r\n  const data = {\r\n    selectedIndex: selectedIndex,\r\n    onItemClick: onItemClick,\r\n    items: props.items,\r\n    getText: props.getText,\r\n    isLoading: props.isLoading,\r\n    isItemLoaded: props.isItemLoaded,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FixedSizeList\r\n        itemData={data}\r\n        height={props.height}\r\n        width={\"100%\"}\r\n        itemSize={props.itemSize}\r\n        itemCount={props.itemCount ? props.itemCount : data.items.length}\r\n        onItemsRendered={props.onItemsRendered}\r\n        ref={props.reff}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VirtualizedList;\r\n","import React from \"react\";\r\nimport VirtualizedList from \"./VirtualizedList\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\n\r\ninterface Props<T> {\r\n  height: number;\r\n  itemSize: number;\r\n  hasNextPage: boolean;\r\n  isNextPageLoading: boolean;\r\n  items: T[];\r\n  getText: (item: T) => string;\r\n  loadNextPage: (index: number) => Promise<any>;\r\n  onItemSelected?: (item: T, index: number) => void;\r\n  onItemClick?: (item: T, index: number) => void;\r\n}\r\n\r\nfunction InfiniteLoaderList<T>(props: Props<T>) {\r\n  // If there are more items to be loaded, add an extra row to hold a loading indicator.\r\n  const itemCount = props.hasNextPage\r\n    ? props.items.length + 1\r\n    : props.items.length;\r\n\r\n  // Only load 1 page of items at a time.\r\n  const loadMoreItems = props.isNextPageLoading\r\n    ? () => Promise.resolve()\r\n    : props.loadNextPage;\r\n\r\n  // Every row is loaded except for the loading indicator row.\r\n  const isItemLoaded = (index: number) =>\r\n    !props.hasNextPage || index < props.items.length;\r\n\r\n  function getText(item: T): string {\r\n    return props.getText(item);\r\n  }\r\n\r\n  return (\r\n    <InfiniteLoader\r\n      isItemLoaded={isItemLoaded}\r\n      itemCount={itemCount}\r\n      loadMoreItems={loadMoreItems}\r\n    >\r\n      {({ onItemsRendered, ref }) => (\r\n        <VirtualizedList\r\n          isLoading={props.isNextPageLoading}\r\n          isItemLoaded={isItemLoaded}\r\n          onItemsRendered={onItemsRendered}\r\n          reff={ref}\r\n          height={props.height}\r\n          itemSize={props.itemSize}\r\n          items={props.items}\r\n          itemCount={itemCount}\r\n          getText={getText}\r\n          onItemSelected={props.onItemSelected}\r\n          onItemClick={props.onItemClick}\r\n        />\r\n      )}\r\n    </InfiniteLoader>\r\n  );\r\n}\r\n\r\nexport default InfiniteLoaderList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getPlaylists, getUserId } from \"../spotifyAPI/SpotifyAccess\";\r\nimport \"../App.scss\";\r\nimport InfiniteLoaderList from \"./utils/InfiniteLoaderList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: theme.spacing(22),\r\n    margin: theme.spacing(3),\r\n    backgroundColor: theme.palette.grey[900],\r\n  },\r\n  header: {\r\n    color: theme.palette.primary.main,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(2),\r\n    height: theme.spacing(6),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  onPlaylistSelected?: (playlist: Playlist, index: number) => void;\r\n}\r\n\r\nconst Playlists: React.FC<Props> = (props) => {\r\n  const classes = useStyles();\r\n  const [playlists, setPlaylists] = useState<Playlist[]>([]);\r\n  const [skippedPlaylists, setSkippedPlaylists] = useState<number>(0);\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n  const [isNextPageLoading, setIsNextPageLoading] = useState<boolean>(false);\r\n  const [hasNextPage, setHasNextPage] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    getUserId().then((userId) => {\r\n      loadMorePlaylistsWithUserId(userId, 0);\r\n      setUserId(userId);\r\n    });\r\n  }, []);\r\n\r\n  const loadMorePlaylists = (index: number): Promise<any> => {\r\n    return loadMorePlaylistsWithUserId(userId, index);\r\n  };\r\n\r\n  const loadMorePlaylistsWithUserId = (\r\n    userId: string | null,\r\n    index: number\r\n  ): Promise<any> => {\r\n    if (!userId) return Promise.resolve();\r\n\r\n    setIsNextPageLoading(true);\r\n    let loadAmount = 40;\r\n\r\n    return getPlaylists(loadAmount, index + skippedPlaylists).then((data) => {\r\n      setIsNextPageLoading(false);\r\n\r\n      if (!data) {\r\n        setHasNextPage(false);\r\n        return;\r\n      }\r\n\r\n      if (data.items.length < loadAmount) setHasNextPage(false);\r\n\r\n      // Filter out unowned playlists\r\n      let filteredData = data.items.filter(\r\n        (playlist) => playlist.owner.id === userId\r\n      );\r\n\r\n      setSkippedPlaylists(\r\n        skippedPlaylists + data.items.length - filteredData.length // Count unowned playlists\r\n      );\r\n      setPlaylists(\r\n        (playlists) => playlists.concat(filteredData) // Append loaded playlists\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} className={classes.root}>\r\n      <div className={classes.header}>\r\n        <h2>Playlists</h2>\r\n      </div>\r\n      <Divider />\r\n      <InfiniteLoaderList\r\n        hasNextPage={hasNextPage}\r\n        isNextPageLoading={isNextPageLoading}\r\n        height={784}\r\n        itemSize={46}\r\n        items={playlists}\r\n        getText={(playlist: Playlist) => playlist.name}\r\n        loadNextPage={loadMorePlaylists}\r\n        onItemSelected={props.onPlaylistSelected}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Playlists;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getSong, getTracks } from \"../spotifyAPI/SpotifyAccess\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport Playlists from \"../components/Playlists\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  app: {\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  content: {\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  sideBar: {\r\n    width: \"100%\",\r\n    maxWidth: theme.spacing(40),\r\n  },\r\n}));\r\n\r\nconst MainPage: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [song, setSong] = useState<string | null>(null);\r\n  const [playlist, setPlaylist] = useState<Playlist | null>(null);\r\n\r\n  useEffect(() => {\r\n    setCurrentlyPlayingSong();\r\n  }, []);\r\n\r\n  const setCurrentlyPlayingSong = (): void => {\r\n    getSong().then((result) => {\r\n      setSong(result);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.sideBar}>\r\n        <Playlists\r\n          onPlaylistSelected={(playlist, index) => {\r\n            setPlaylist(playlist);\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.app}>\r\n        {playlist ? (\r\n          <div>\r\n            <div className={classes.header}>\r\n              {playlist ? (\r\n                <div>\r\n                  <img\r\n                    height={300}\r\n                    src={playlist.images[0].url}\r\n                    alt={\"Playlist Cover\"}\r\n                  />\r\n                  <h1>{playlist.name}</h1>\r\n                </div>\r\n              ) : (\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              )}\r\n              <p />\r\n            </div>\r\n\r\n            <Divider variant=\"middle\" />\r\n\r\n            <div className={classes.content}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                onClick={setCurrentlyPlayingSong}\r\n              >\r\n                Show Current Song\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                onClick={() => console.log(playlist)}\r\n              >\r\n                Print Playlist\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                onClick={() =>\r\n                  getTracks(playlist).then((data) => console.log(data))\r\n                }\r\n              >\r\n                Print Tracks\r\n              </Button>\r\n\r\n              <h1>{song ? song : \"-No song is currently playing-\"}</h1>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.header}>\r\n            <h1>Select a playlist</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classes.sideBar} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\n\r\nconst LoadingPage: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport { lightBlue } from \"@material-ui/core/colors\";\r\n\r\nlet darkGrey = \"#121212\";\r\nlet mediumGrey = \"#181818\";\r\nlet lightGrey = \"#282828\";\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: mediumGrey,\r\n    },\r\n    primary: lightBlue,\r\n    secondary: green,\r\n    grey: {\r\n      800: lightGrey,\r\n      900: darkGrey,\r\n    },\r\n  },\r\n});\r\n\r\nexport default darkTheme;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport LoadingPage from \"./pages/LoadingPage\";\nimport {\n  validateAccessToken,\n  startAccessTokenRefreshInterval,\n} from \"./spotifyAPI/AuthService\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport history from \"./utils/history\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport darkTheme from \"./themes/darkTheme\";\n\nfunction App() {\n  validateAccessToken();\n  startAccessTokenRefreshInterval();\n\n  return (\n    <div className=\"outerWrap\">\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <Router history={history}>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/\" exact component={MainPage} />\n              <Route path=\"/loading\" exact component={LoadingPage} />\n              <Route\n                path=\"/auth\"\n                exact\n                component={() => {\n                  validateAccessToken();\n                  return null;\n                }}\n              />\n            </Switch>\n          </div>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}