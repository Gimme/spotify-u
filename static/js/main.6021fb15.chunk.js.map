{"version":3,"sources":["utils/history.js","SpotifyAPI/AuthService.js","SpotifyAPI/SpotifyAccess.js","Pages/MainPage.js","Pages/LoadingPage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["history","createHashHistory","cookies","Cookies","validateAccessToken","fetchAccessToken","console","log","accessToken","get","undefined","Promise","resolve","string","parsed","queryString","parse","window","location","search","access_token","expires_in","refresh_token","parseAccessToken","set","path","maxAge","generateNewAccessTokenFromSpotify","refreshAccessToken","refreshToken","fetch","refresh_token_uri","then","response","json","data","minDurationBeforeRefresh","push","replace","processResponse","statusCode","status","all","remove","MainPage","useState","count","setCount","song","setSong","useEffect","className","src","logo","alt","onClick","promise","token","headers","Authorization","item","name","getSong","result","LoadingPage","App","setInterval","accessTokenRefreshInterval","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.6021fb15.chunk.js","sourcesContent":["import { createHashHistory } from \"history\";\r\n\r\nconst history = createHashHistory();\r\nexport default history;\r\n","import queryString from \"query-string\";\r\nimport Cookies from \"universal-cookie\";\r\nimport history from \"../utils/history\";\r\n\r\nvar minDurationBeforeRefresh = 5; // Minutes\r\n\r\nvar authentication_uri = \"https://spotify-u-backend.herokuapp.com/login\";\r\nvar refresh_token_uri = \"https://spotify-u-backend.herokuapp.com/refresh_token\";\r\n\r\nvar accessTokenKey = \"access_token\";\r\nvar refreshTokenKey = \"refresh_token\";\r\nvar recentRefreshKey = \"recently_refreshed_access_token\";\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport const testt = () => {\r\n  history.push(\"/loading\");\r\n};\r\n\r\n/**\r\n * Fetches a new access token from Spotify.\r\n */\r\nexport const validateAccessToken = () => {\r\n  fetchAccessToken();\r\n};\r\n\r\n/**\r\n * Returns a promise of an access token if one is found, otherwise generates a new one from Spotify.\r\n *\r\n * Access token search order:\r\n * 1. Cookie\r\n * 2. Parse from address field\r\n * 3. Generate new from Spotify\r\n */\r\nexport const fetchAccessToken = () => {\r\n  // Get form cookie\r\n  console.log(\"accessToken1\");\r\n  let accessToken = cookies.get(accessTokenKey);\r\n  if (accessToken !== undefined) {\r\n    //if (cookies.get(accessTokenKey).expiresSoon) refreshAccessToken();\r\n    return Promise.resolve(accessToken);\r\n  }\r\n  console.log(\"accessToken2\");\r\n\r\n  // Get from address field\r\n  let parsed = parseAccessToken();\r\n  accessToken = parsed.access_token;\r\n  if (!isNullOrEmpty(accessToken)) {\r\n    // Add new cookie with the parsed access token\r\n    cookies.set(accessTokenKey, accessToken, {\r\n      path: \"/\",\r\n      maxAge: parsed.expires_in,\r\n    });\r\n    cookies.set(refreshTokenKey, parsed.refresh_token, {\r\n      path: \"/\",\r\n      maxAge: parsed.expires_in,\r\n    });\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Generate new from Spotify\r\n  console.log(\"accessToken3\");\r\n  generateNewAccessTokenFromSpotify();\r\n  return null;\r\n};\r\n\r\n/**\r\n * Generate new access token from Spotify.\r\n */\r\nexport const invalidateAccessToken = () => {\r\n  cookies.remove(accessTokenKey);\r\n  generateNewAccessTokenFromSpotify();\r\n};\r\n\r\nexport const refreshAccessToken = () => {\r\n  // Don't refresh again if done recently\r\n  if (cookies.get(recentRefreshKey) !== undefined) return;\r\n\r\n  let refreshToken = cookies.get(refreshTokenKey);\r\n  if (refreshToken === undefined) return null;\r\n\r\n  let expireTime = 3600;\r\n  console.log(\"Refreshing access token...\");\r\n  return fetch(refresh_token_uri + \"?refresh_token=\" + refreshToken)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(\"Refreshed access token\");\r\n      let accessToken = data.access_token;\r\n      cookies.set(accessTokenKey, accessToken, {\r\n        path: \"/\",\r\n        maxAge: expireTime,\r\n      });\r\n      cookies.set(refreshTokenKey, refreshToken, {\r\n        path: \"/\",\r\n        maxAge: expireTime,\r\n      });\r\n      cookies.set(recentRefreshKey, \"\", {\r\n        path: \"/\",\r\n        maxAge: minDurationBeforeRefresh * 60,\r\n      });\r\n      return accessToken;\r\n    });\r\n};\r\n\r\nfunction generateNewAccessTokenFromSpotify() {\r\n  history.push(\"/loading\");\r\n  window.location.replace(authentication_uri);\r\n}\r\n\r\n/**\r\n * Returns the access token parsed from the address field.\r\n */\r\nfunction parseAccessToken() {\r\n  let parsed = queryString.parse(window.location.search);\r\n  return {\r\n    access_token: parsed.access_token,\r\n    expires_in: parsed.expires_in,\r\n    refresh_token: parsed.refresh_token,\r\n  };\r\n}\r\n\r\nfunction isNullOrEmpty(string) {\r\n  return string === undefined || string === null || string === \"\";\r\n}\r\n","import { fetchAccessToken, invalidateAccessToken } from \"./AuthService\";\r\n\r\n/**\r\n * Returns the currently playing song, or null.\r\n */\r\nexport const getSong = () => {\r\n  let promise = fetchAccessToken();\r\n  if (promise === null) return Promise.resolve(null);\r\n\r\n  return promise\r\n    .then((token) => {\r\n      return fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\r\n        headers: { Authorization: \"Bearer \" + token },\r\n      });\r\n    })\r\n    .then(processResponse)\r\n    .then((data) => {\r\n      if (!data) return null;\r\n      return data.item.name;\r\n    });\r\n};\r\n\r\nfunction processResponse(response) {\r\n  const statusCode = response.status;\r\n  if (statusCode === 204) return Promise.resolve(null);\r\n  const data = response.json();\r\n  return Promise.all([statusCode, data]).then(([statusCode, data]) => {\r\n    console.log(\"processResponse1\");\r\n    if (statusCode === 401) {\r\n      // Invalid access token\r\n      console.log(\"processResponse2\");\r\n      invalidateAccessToken();\r\n      return null;\r\n    }\r\n\r\n    return statusCode === 200 ? data : null;\r\n  });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getSong } from \"../SpotifyAPI/SpotifyAccess\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.css\";\r\nimport { validateAccessToken, testt } from \"../SpotifyAPI/AuthService\";\r\n\r\nfunction MainPage() {\r\n  const [count, setCount] = useState(0);\r\n  const [song, setSong] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //validateAccessToken();\r\n    //setCurrentlyPlayingSong();\r\n  }, []);\r\n\r\n  const increment = () => {\r\n    setCount(count + 1);\r\n    testt();\r\n  };\r\n\r\n  const setCurrentlyPlayingSong = () => {\r\n    getSong().then((result) => {\r\n      setSong(result);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p />\r\n\r\n      <button onClick={setCurrentlyPlayingSong}>Show Current Song</button>\r\n\r\n      <h1>{song ? song : \"-No song is currently playing-\"}</h1>\r\n\r\n      <button onClick={increment}>Increment</button>\r\n\r\n      <h1>{count}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.css\";\r\n\r\nfunction LoadingPage() {\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingPage;\r\n","import React from \"react\";\nimport MainPage from \"./Pages/MainPage\";\nimport LoadingPage from \"./Pages/LoadingPage\";\nimport {\n  validateAccessToken,\n  refreshAccessToken,\n} from \"./SpotifyAPI/AuthService\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport history from \"./utils/history\";\n\nvar accessTokenRefreshInterval = 10; // Minutes\n\nfunction App() {\n  startAccessTokenRefreshInterval();\n  validateAccessToken();\n\n  return (\n    <Router history={history}>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/loading\" component={LoadingPage} />\n          <Route path=\"/\" exact component={MainPage} />\n          <Route\n            path=\"/auth\"\n            exact\n            component={() => {\n              validateAccessToken();\n              return null;\n            }}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n/**\n * Starts an task to refresh the Spotify access token every 10 minutes;\n */\nfunction startAccessTokenRefreshInterval() {\n  refreshAccessToken();\n  window.setInterval(() => {\n    refreshAccessToken();\n  }, accessTokenRefreshInterval * 60 * 1000);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}