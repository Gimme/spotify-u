{"version":3,"sources":["logo.svg","utils/history.tsx","spotifyAPI/AuthService.tsx","spotifyAPI/SpotifyAccess.tsx","components/utils/Delayed.tsx","components/DelayedCircularProgress.tsx","components/utils/VirtualizedList.tsx","components/utils/InfiniteLoaderList.tsx","components/Playlists.tsx","utils/PlaylistAlgorithms.tsx","interfaces/Track.tsx","components/utils/CheckboxList.tsx","components/TrackListItem.tsx","components/LoadingButton.tsx","components/DuplicateTracks.tsx","pages/MainPage.tsx","pages/LoadingPage.tsx","themes/darkTheme.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","history","createHashHistory","cookies","Cookies","validateAccessToken","fetchAccessToken","accessToken","get","undefined","Promise","resolve","string","parsed","queryString","parse","window","location","search","access_token","refresh_token","expires_in","rest","searchRest","replaceState","href","replace","consumeSearchParams","stringify","hash","consumeAccessTokenParams","updateTokenCookies","generateNewAccessTokenFromSpotify","refreshAccessToken","refreshToken","console","log","fetch","refresh_token_uri","then","response","json","data","push","backend_uri","set","path","maxAge","expirationTime","minDurationBeforeRefresh","getTracks","playlist","appendTracksFromOffset","offset","tracks","fetchFromSpotifyAPI","id","limit","concat","items","next","checkLikedTracks","appendCheckLikedSongs","liked","ids","leftoverTracks","count","track","length","queryParams","method","body","promise","headers","Authorization","JSON","processResponse","statusCode","status","all","remove","Delayed","props","useState","hidden","setHidden","useEffect","timeout","setTimeout","wait","clearTimeout","children","DelayedCircularProgress","CircularProgress","size","className","renderRow","content","index","style","item","loaded","isItemLoaded","isLoading","ListItem","height","key","Box","justifyContent","width","display","button","selected","selectedIndex","onClick","onItemClick","ListItemText","primaryTypographyProps","noWrap","primary","getText","VirtualizedList","setSelectedIndex","alreadySelected","onItemSelected","itemData","itemSize","itemCount","onItemsRendered","ref","reff","InfiniteLoaderList","hasNextPage","loadMoreItems","isNextPageLoading","loadNextPage","useStyles","makeStyles","theme","root","minWidth","spacing","margin","backgroundColor","palette","grey","header","color","main","alignItems","paddingLeft","Playlists","classes","playlists","setPlaylists","skippedPlaylists","setSkippedPlaylists","userId","setUserId","setIsNextPageLoading","setHasNextPage","loadMorePlaylistsWithUserId","filteredData","filter","owner","Paper","elevation","Divider","name","onPlaylistSelected","compareTracks","track1","track2","options","sensitivity","artists","localeCompare","getAddedAtDate","Date","added_at","createStyles","CheckboxList","List","map","labelId","role","dense","divider","listItemClassName","handleToggle","ListItemIcon","Checkbox","edge","checked","isChecked","tabIndex","disableRipple","inputProps","getContent","paddingRight","title","artist","album","addedAt","duration","TrackListItem","Favorite","fontSize","FavoriteBorder","Typography","result","formatArtists","date","minutesSince","now","getTime","roundedMinutesSince","Math","round","roundedHoursSince","getFullYear","getMonth","slice","getDate","formatAddedAt","durationMs","durationSec","hours","floor","minutes","seconds","formatDuration","duration_ms","buttonProgress","position","LoadingButton","Button","variant","startIcon","disabled","loadingCondition","background","default","marginBottom","list","checkedListItem","secondary","DuplicateTracks","newList","sublist","convert2DListTo1D","duplicates","setTracks","i","bestDuplicateIndex","bestAddedAtTime","addedAtTime","getWorstDuplicates","setChecked","deleteLoading","setDeleteLoading","indexOf","deleteChecked","tracksToRemove","newTracks","removeSongsFromPlaylist","snapshotId","uri","positions","error","snapshot_id","duplicatesSnapshotId","success","currentIndex","newChecked","splice","Delete","app","paddingTop","sideBar","maxWidth","MainPage","song","setSong","setPlaylist","setDuplicates","setDuplicatesSnapshotId","findDuplicatesLoading","setFindDuplicatesLoading","setCurrentlyPlayingSong","src","images","url","alt","logo","playlistId","duplicateTracks","song1","song2","sortedTracks","sort","currentTrack","currentSong","currentArtist","currentDuplicateList","isFirstDuplicate","j","t","compareTwoStrings","findDuplicateTracks","tracksToCheckIfLiked","duplicateSet","LoadingPage","darkTheme","createMuiTheme","type","lightBlue","pink","800","900","App","setInterval","accessTokenRefreshInterval","ThemeProvider","CssBaseline","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d5b43f44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createHashHistory } from \"history\";\r\n\r\nconst history = createHashHistory();\r\nexport default history;\r\n\r\n/**\r\n * Removes the search params not present in the searchRest.\r\n * @param searchRest the rest string of the unconsumed search params\r\n */\r\nexport const consumeSearchParams = (searchRest: string): void => {\r\n  window.history.replaceState(\r\n    null,\r\n    \"\",\r\n    window.location.href.replace(\r\n      window.location.search,\r\n      (searchRest !== \"\" ? \"?\" : \"\") + searchRest\r\n    )\r\n  );\r\n};\r\n","import queryString from \"query-string\";\r\nimport Cookies from \"universal-cookie\";\r\nimport history, { consumeSearchParams } from \"../utils/history\";\r\n\r\nlet accessTokenRefreshInterval = 1; // Minutes\r\nlet minDurationBeforeRefresh = 15; // Minutes\r\nlet expirationTime = 60; // Minutes\r\n\r\nconst overrideUseProductionBackend = true;\r\nconst backend_uri =\r\n  process.env.NODE_ENV === \"production\" || overrideUseProductionBackend\r\n    ? \"https://spotify-u-backend.herokuapp.com\"\r\n    : \"http://localhost:8888\";\r\nlet authentication_uri = backend_uri + \"/login\";\r\nlet refresh_token_uri = backend_uri + \"/refresh_token\";\r\n\r\nlet accessTokenKey = \"access_token\";\r\nlet refreshTokenKey = \"refresh_token\";\r\nlet recentRefreshKey = \"recently_refreshed_access_token\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n/**\r\n * Starts an task to refresh the Spotify access token every 10 minutes;\r\n */\r\nexport const startAccessTokenRefreshInterval = (): void => {\r\n  refreshAccessToken();\r\n  window.setInterval(() => {\r\n    refreshAccessToken();\r\n  }, accessTokenRefreshInterval * 60 * 1000);\r\n};\r\n\r\n/**\r\n * Fetches a new access token from Spotify.\r\n */\r\nexport const validateAccessToken = (): void => {\r\n  fetchAccessToken();\r\n};\r\n\r\n/**\r\n * Returns a promise of an access token if one is found, otherwise generates a new one from Spotify.\r\n *\r\n * Access token search order:\r\n * 1. Cookie\r\n * 2. Parse from address field\r\n * 3. Generate new from Spotify\r\n */\r\nexport const fetchAccessToken = (): Promise<string> | null => {\r\n  // Get from cookie\r\n  let accessToken: string = cookies.get(accessTokenKey);\r\n  if (accessToken !== undefined) {\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Parse from address field\r\n  let parsed = consumeAccessTokenParams();\r\n  accessToken = parsed.access_token;\r\n  if (!isNullOrEmpty(accessToken)) {\r\n    // Add new cookie with the parsed access token\r\n    updateTokenCookies(accessToken, parsed.refresh_token);\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Generate new from Spotify\r\n  generateNewAccessTokenFromSpotify();\r\n  return null;\r\n};\r\n\r\n/**\r\n * Generate new access token from Spotify.\r\n */\r\nexport const invalidateAccessToken = (): void => {\r\n  cookies.remove(accessTokenKey);\r\n  generateNewAccessTokenFromSpotify();\r\n};\r\n\r\n/**\r\n * Refreshes the access token by passing the refresh token to the backend.\r\n * Returns a promise of with the refreshed access token (the same access token\r\n * that the refresh token was originally generated for).\r\n */\r\nexport const refreshAccessToken = (): void => {\r\n  // Don't refresh again if done recently\r\n  if (cookies.get(recentRefreshKey) !== undefined) return;\r\n\r\n  let refreshToken = cookies.get(refreshTokenKey);\r\n  if (refreshToken === undefined) return;\r\n\r\n  console.log(\"Refreshing access token...\");\r\n\r\n  fetch(refresh_token_uri + \"?refresh_token=\" + refreshToken)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(\"Refreshed access token\");\r\n\r\n      let accessToken = data.access_token;\r\n      updateTokenCookies(accessToken, refreshToken);\r\n    });\r\n};\r\n\r\n/**\r\n * Generates a new access token by redirecting to Spotify's authentication page.\r\n */\r\nfunction generateNewAccessTokenFromSpotify(): void {\r\n  history.push(\"/loading\");\r\n  window.location.replace(authentication_uri);\r\n}\r\n\r\ninterface AccessTokenParams {\r\n  access_token: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n}\r\n\r\n/**\r\n * Returns the access token parsed from the address field.\r\n */\r\nfunction consumeAccessTokenParams(): AccessTokenParams {\r\n  let { access_token, refresh_token, expires_in, ...rest } = queryString.parse(\r\n    window.location.search\r\n  );\r\n  consumeSearchParams(queryString.stringify(rest));\r\n  // Remove the hash that is sometimes appended on the callback\r\n  window.location.hash = window.location.hash.replace(\"_=_\", \"\");\r\n  return {\r\n    access_token: access_token as string,\r\n    expires_in: (expires_in as unknown) as number,\r\n    refresh_token: refresh_token as string,\r\n  };\r\n}\r\n\r\n/**\r\n * Updates the access/refresh token values stored in the cookies.\r\n *\r\n * @param accessToken The access token value to set\r\n * @param refreshToken The refresh token value to set\r\n */\r\nfunction updateTokenCookies(accessToken: string, refreshToken: string): void {\r\n  cookies.set(accessTokenKey, accessToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(refreshTokenKey, refreshToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(recentRefreshKey, \"\", {\r\n    path: \"/\",\r\n    maxAge: minDurationBeforeRefresh * 60,\r\n  });\r\n}\r\n\r\n/**\r\n * Returns if the specified string is undefined, null or empty.\r\n *\r\n * @param string The string to check\r\n */\r\nfunction isNullOrEmpty(string: string): boolean {\r\n  return string === undefined || string === null || string === \"\";\r\n}\r\n","import { fetchAccessToken, invalidateAccessToken } from \"./AuthService\";\r\nimport queryString from \"query-string\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport Track from \"../interfaces/Track\";\r\n\r\n/**\r\n * Returns the user ID of the current user.\r\n */\r\nexport const getUserId = (): Promise<string | null> => {\r\n  return fetchFromSpotifyAPI(\"me\").then((data) => {\r\n    if (!data) return null;\r\n    return data.id;\r\n  });\r\n};\r\n\r\n/**\r\n * Returns the currently playing song, or null.\r\n */\r\nexport const getSong = (): Promise<string | null> => {\r\n  return fetchFromSpotifyAPI(\"me/player/currently-playing\").then((data) => {\r\n    if (!data || !data.item) return null;\r\n    return data.item.name;\r\n  });\r\n};\r\n\r\nexport const getPlaylist = (playlistId: string): Promise<Playlist | null> => {\r\n  return fetchFromSpotifyAPI(`playlists/${playlistId}`).then((data) => {\r\n    if (!data) return null;\r\n    return data;\r\n  });\r\n};\r\n\r\n/**\r\n * Returns all tracks from the specified playlist.\r\n *\r\n * @param playlistId The playlist to get the tracks of\r\n */\r\nexport const getTracks = (playlist: Playlist): Promise<Track[] | null> => {\r\n  return appendTracksFromOffset(playlist, 0, []);\r\n};\r\n\r\n/**\r\n * Appends all tracks in the specified playlist, starting from the specified offset, to the specified tracks array.\r\n *\r\n * @param playlist The playlist to get the tracks of\r\n * @param offset The offset to start from\r\n * @param tracks The array to append the tracks to\r\n */\r\nfunction appendTracksFromOffset(\r\n  playlist: Playlist,\r\n  offset: number,\r\n  tracks: Track[]\r\n): Promise<Track[] | null> {\r\n  const limit = 100;\r\n\r\n  return fetchFromSpotifyAPI(`playlists/${playlist.id}/tracks`, {\r\n    limit: limit,\r\n    offset: offset,\r\n  }).then((data: TracksResponse | null) => {\r\n    if (!data) return null;\r\n\r\n    tracks = tracks.concat(data.items);\r\n\r\n    if (!data.next) return Promise.resolve(tracks);\r\n    return appendTracksFromOffset(playlist, offset + limit, tracks);\r\n  });\r\n}\r\n\r\n/**\r\n * Returns a list of booleans representing if each track is liked by the user.\r\n *\r\n * @param tracks The tracks to check if liked\r\n */\r\nexport const checkLikedTracks = (\r\n  tracks: Track[]\r\n): Promise<boolean[] | null> => {\r\n  return appendCheckLikedSongs([], tracks);\r\n};\r\n\r\n/**\r\n * Appends liked track check results to the specified liked array.\r\n *\r\n * @param liked The array to append the results to\r\n * @param tracks The tracks to check\r\n */\r\nfunction appendCheckLikedSongs(\r\n  liked: boolean[],\r\n  tracks: Track[]\r\n): Promise<boolean[] | null> {\r\n  const limit = 50;\r\n\r\n  let ids = \"\";\r\n  let leftoverTracks: Track[] = [];\r\n  let count = 0;\r\n  for (const track of tracks) {\r\n    if (count < limit) {\r\n      if (ids.length !== 0) ids = ids + \",\";\r\n      ids = ids + track.track.id;\r\n    } else leftoverTracks.push(track);\r\n    count++;\r\n  }\r\n\r\n  return fetchFromSpotifyAPI(\"me/tracks/contains\", {\r\n    ids: ids,\r\n  }).then((data: boolean[] | null) => {\r\n    if (!data) return null;\r\n\r\n    liked = liked.concat(data);\r\n\r\n    if (leftoverTracks.length === 0) return Promise.resolve(liked);\r\n    return appendCheckLikedSongs(liked, leftoverTracks);\r\n  });\r\n}\r\n\r\nexport const removeSongsFromPlaylist = (\r\n  playlist: Playlist,\r\n  tracksToRemove: Track[],\r\n  snapshotId: string\r\n): Promise<boolean> => {\r\n  const limit = 1;\r\n  let tracks = [];\r\n\r\n  let leftoverTracks: Track[] = [];\r\n  let count = 0;\r\n  for (const track of tracksToRemove) {\r\n    count++;\r\n    if (count > limit) {\r\n      leftoverTracks.push(track);\r\n      continue;\r\n    }\r\n    if (!track.position) {\r\n      console.error(\"Missing track position\");\r\n      continue;\r\n    }\r\n\r\n    tracks.push({\r\n      uri: track.track.uri,\r\n      positions: [track.position],\r\n    });\r\n  }\r\n\r\n  return fetchFromSpotifyAPI(\r\n    `playlists/${playlist.id}/tracks`,\r\n    undefined,\r\n    \"DELETE\",\r\n    {\r\n      tracks: tracks,\r\n      snapshot_id: snapshotId,\r\n    }\r\n  ).then((data) => {\r\n    if (!data) return false;\r\n    if (leftoverTracks.length === 0) return true;\r\n    return removeSongsFromPlaylist(playlist, leftoverTracks, data.snapshot_id);\r\n  });\r\n};\r\n\r\n/**\r\n * The response data when fetching tracks.\r\n */\r\ninterface TracksResponse {\r\n  items: Track[];\r\n  next: string;\r\n}\r\n\r\n/**\r\n * Returns a list of the playlists owned or followed by the Spotify user.\r\n *\r\n * @param limit The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.\r\n * @param offset The index of the first playlist to return. Default: 0 (the first object).\r\n * Maximum offset: 100.000. Use with limit to get the next set of playlists.\r\n */\r\nexport const getPlaylists = (\r\n  limit?: number,\r\n  offset?: number\r\n): Promise<{ items: Playlist[] } | null> => {\r\n  return fetchFromSpotifyAPI(\"me/playlists\", {\r\n    limit: limit,\r\n    offset: offset,\r\n  }).then((data) => {\r\n    if (!data) return null;\r\n    return data;\r\n  });\r\n};\r\n\r\nfunction fetchFromSpotifyAPI(\r\n  path: string,\r\n  queryParams?: object,\r\n  method?: \"GET\" | \"POST\" | \"DELETE\",\r\n  body?: object\r\n): Promise<any | null> {\r\n  let promise = fetchAccessToken();\r\n  if (promise === null) return Promise.resolve(null);\r\n\r\n  return promise\r\n    .then((accessToken) => {\r\n      return fetch(\r\n        \"https://api.spotify.com/v1/\" +\r\n          path +\r\n          (queryParams ? \"?\" + queryString.stringify(queryParams) : \"\"),\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + accessToken,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: method,\r\n          body: JSON.stringify(body),\r\n        }\r\n      );\r\n    })\r\n    .then(processResponse);\r\n}\r\n\r\nfunction processResponse(response: {\r\n  status: any;\r\n  json: () => any;\r\n}): Promise<any | null> {\r\n  const statusCode = response.status;\r\n  if (statusCode === 204) return Promise.resolve(null);\r\n  const data = response.json();\r\n  return Promise.all([statusCode, data]).then(([statusCode, data]) => {\r\n    if (statusCode === 401) {\r\n      // Invalid access token\r\n      invalidateAccessToken();\r\n      return null;\r\n    }\r\n\r\n    return statusCode === 200 ? data : null;\r\n  });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  wait: number;\r\n}\r\n\r\n/**\r\n * Hides the children until the specified wait (ms) duration is over.\r\n */\r\nconst Delayed: React.FC<Props> = (props) => {\r\n  const [hidden, setHidden] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setHidden(false);\r\n    }, props.wait);\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [props.wait]);\r\n\r\n  return hidden ? null : <>{props.children}</>;\r\n};\r\n\r\nexport default Delayed;\r\n","import React from \"react\";\r\nimport Delayed from \"./utils/Delayed\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\ninterface Props {\r\n  className?: string;\r\n  size?: number;\r\n  wait?: number;\r\n}\r\n\r\nexport default function DelayedCircularProgress(props: Props) {\r\n  return (\r\n    <Delayed wait={props.wait ? props.wait : 500}>\r\n      <CircularProgress size={props.size} className={props.className} />\r\n    </Delayed>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../../App.scss\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport DelayedCircularProgress from \"../DelayedCircularProgress\";\r\n\r\ninterface RowProps<T> {\r\n  index: number;\r\n  style: React.CSSProperties | undefined;\r\n  data: {\r\n    selectedIndex: number;\r\n    onItemClick: (item: T, index: number) => void;\r\n    items: T[];\r\n    getText: (t: T) => string;\r\n    isLoading?: boolean;\r\n    isItemLoaded?: (index: number) => boolean;\r\n  };\r\n}\r\n\r\nfunction renderRow<T>(props: RowProps<T>) {\r\n  const { index, style } = props;\r\n  const item = props.data.items[index];\r\n\r\n  const loaded: boolean =\r\n    !props.data.isItemLoaded || props.data.isItemLoaded(index);\r\n\r\n  const loading: boolean = !!props.data.isLoading && props.data.isLoading;\r\n\r\n  let content;\r\n  if (loading) {\r\n    content = (\r\n      <ListItem style={{ height: 56 }} key={index}>\r\n        <Box justifyContent=\"center\" width=\"100%\" display=\"flex\">\r\n          <DelayedCircularProgress />\r\n        </Box>\r\n      </ListItem>\r\n    );\r\n  } else if (!loaded) {\r\n    content = null;\r\n  } else {\r\n    content = (\r\n      <ListItem\r\n        button\r\n        key={index}\r\n        selected={props.data.selectedIndex === index}\r\n        onClick={() => {\r\n          if (props.data.onItemClick && item)\r\n            props.data.onItemClick(item, index);\r\n        }}\r\n      >\r\n        <ListItemText\r\n          primaryTypographyProps={{ noWrap: true }}\r\n          primary={props.data.getText(item)}\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  return <div style={style}>{content}</div>;\r\n}\r\n\r\ninterface Props<T> {\r\n  height: number;\r\n  itemSize: number;\r\n  items: T[];\r\n  getText: (item: T) => string;\r\n  itemCount?: number;\r\n  onItemSelected?: (item: T, index: number) => void;\r\n  onItemClick?: (item: T, index: number) => void;\r\n  onItemsRendered?: any;\r\n  reff?: any;\r\n  isLoading?: boolean;\r\n  isItemLoaded?: (index: number) => boolean;\r\n}\r\n\r\nfunction VirtualizedList<T>(props: Props<T>) {\r\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n\r\n  const onItemClick = (item: T, index: number) => {\r\n    let alreadySelected = index === selectedIndex;\r\n    setSelectedIndex(index);\r\n    if (props.onItemClick) props.onItemClick(item, index);\r\n    if (!alreadySelected && props.onItemSelected)\r\n      props.onItemSelected(item, index);\r\n  };\r\n\r\n  const data = {\r\n    selectedIndex: selectedIndex,\r\n    onItemClick: onItemClick,\r\n    items: props.items,\r\n    getText: props.getText,\r\n    isLoading: props.isLoading,\r\n    isItemLoaded: props.isItemLoaded,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FixedSizeList\r\n        itemData={data}\r\n        height={props.height}\r\n        width={\"100%\"}\r\n        itemSize={props.itemSize}\r\n        itemCount={props.itemCount ? props.itemCount : data.items.length}\r\n        onItemsRendered={props.onItemsRendered}\r\n        ref={props.reff}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VirtualizedList;\r\n","import React from \"react\";\r\nimport VirtualizedList from \"./VirtualizedList\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\n\r\ninterface Props<T> {\r\n  height: number;\r\n  itemSize: number;\r\n  hasNextPage: boolean;\r\n  isNextPageLoading: boolean;\r\n  items: T[];\r\n  getText: (item: T) => string;\r\n  loadNextPage: (index: number) => Promise<any>;\r\n  onItemSelected?: (item: T, index: number) => void;\r\n  onItemClick?: (item: T, index: number) => void;\r\n}\r\n\r\nfunction InfiniteLoaderList<T>(props: Props<T>) {\r\n  // If there are more items to be loaded, add an extra row to hold a loading indicator.\r\n  const itemCount = props.hasNextPage\r\n    ? props.items.length + 1\r\n    : props.items.length;\r\n\r\n  // Only load 1 page of items at a time.\r\n  const loadMoreItems = props.isNextPageLoading\r\n    ? () => Promise.resolve()\r\n    : props.loadNextPage;\r\n\r\n  // Every row is loaded except for the loading indicator row.\r\n  const isItemLoaded = (index: number) =>\r\n    !props.hasNextPage || index < props.items.length;\r\n\r\n  function getText(item: T): string {\r\n    return props.getText(item);\r\n  }\r\n\r\n  return (\r\n    <InfiniteLoader\r\n      isItemLoaded={isItemLoaded}\r\n      itemCount={itemCount}\r\n      loadMoreItems={loadMoreItems}\r\n    >\r\n      {({ onItemsRendered, ref }) => (\r\n        <VirtualizedList\r\n          isLoading={props.isNextPageLoading}\r\n          isItemLoaded={isItemLoaded}\r\n          onItemsRendered={onItemsRendered}\r\n          reff={ref}\r\n          height={props.height}\r\n          itemSize={props.itemSize}\r\n          items={props.items}\r\n          itemCount={itemCount}\r\n          getText={getText}\r\n          onItemSelected={props.onItemSelected}\r\n          onItemClick={props.onItemClick}\r\n        />\r\n      )}\r\n    </InfiniteLoader>\r\n  );\r\n}\r\n\r\nexport default InfiniteLoaderList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getPlaylists, getUserId } from \"../spotifyAPI/SpotifyAccess\";\r\nimport \"../App.scss\";\r\nimport InfiniteLoaderList from \"./utils/InfiniteLoaderList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: theme.spacing(22),\r\n    margin: theme.spacing(3),\r\n    backgroundColor: theme.palette.grey[900],\r\n  },\r\n  header: {\r\n    color: theme.palette.primary.main,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(2),\r\n    height: theme.spacing(6),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  onPlaylistSelected?: (playlist: Playlist, index: number) => void;\r\n}\r\n\r\nconst Playlists: React.FC<Props> = (props) => {\r\n  const classes = useStyles();\r\n  const [playlists, setPlaylists] = useState<Playlist[]>([]);\r\n  const [skippedPlaylists, setSkippedPlaylists] = useState<number>(0);\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n  const [isNextPageLoading, setIsNextPageLoading] = useState<boolean>(false);\r\n  const [hasNextPage, setHasNextPage] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    getUserId().then((userId) => {\r\n      loadMorePlaylistsWithUserId(userId, 0);\r\n      setUserId(userId);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const loadMorePlaylists = (index: number): Promise<any> => {\r\n    return loadMorePlaylistsWithUserId(userId, index);\r\n  };\r\n\r\n  const loadMorePlaylistsWithUserId = (\r\n    userId: string | null,\r\n    index: number\r\n  ): Promise<any> => {\r\n    if (!userId) return Promise.resolve();\r\n\r\n    setIsNextPageLoading(true);\r\n    let loadAmount = 40;\r\n\r\n    return getPlaylists(loadAmount, index + skippedPlaylists).then((data) => {\r\n      setIsNextPageLoading(false);\r\n\r\n      if (!data) {\r\n        setHasNextPage(false);\r\n        return;\r\n      }\r\n\r\n      if (data.items.length < loadAmount) setHasNextPage(false);\r\n\r\n      // Filter out unowned playlists\r\n      let filteredData = data.items.filter(\r\n        (playlist) => playlist.owner.id === userId\r\n      );\r\n\r\n      setSkippedPlaylists(\r\n        skippedPlaylists + data.items.length - filteredData.length // Count unowned playlists\r\n      );\r\n      setPlaylists(\r\n        (playlists) => playlists.concat(filteredData) // Append loaded playlists\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} className={classes.root}>\r\n      <div className={classes.header}>\r\n        <h2>Playlists</h2>\r\n      </div>\r\n      <Divider />\r\n      <InfiniteLoaderList\r\n        hasNextPage={hasNextPage}\r\n        isNextPageLoading={isNextPageLoading}\r\n        height={784}\r\n        itemSize={46}\r\n        items={playlists}\r\n        getText={(playlist: Playlist) => playlist.name}\r\n        loadNextPage={loadMorePlaylists}\r\n        onItemSelected={props.onPlaylistSelected}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Playlists;\r\n","import Track from \"../interfaces/Track\";\r\nimport { compareTwoStrings } from \"string-similarity\";\r\n\r\n/**\r\n * Looks through the specified list of tracks and returns any duplicates.\r\n *\r\n * @param tracks The tracks to look through\r\n */\r\nexport const findDuplicateTracks = (tracks: Track[]): Track[][] => {\r\n  // Create a copy of the array sorted by artist\r\n  let sortedTracks: (Track | null)[] = tracks.slice().sort(compareTracks);\r\n  let duplicates: Track[][] = [];\r\n\r\n  // Loop through the whole list\r\n  for (let i = 0; i < sortedTracks.length; i++) {\r\n    let currentTrack = sortedTracks[i];\r\n    // If already checked, go to the next track\r\n    if (!currentTrack) continue;\r\n\r\n    // Store the current song and artist\r\n    let currentSong = currentTrack.track.name;\r\n    let currentArtist = currentTrack.track.artists[0].name;\r\n    // List of duplicates of the current track\r\n    let currentDuplicateList = [];\r\n\r\n    let isFirstDuplicate: boolean = true;\r\n    // Loop through all subsequent tracks by the current artist\r\n    for (let j = i + 1; j < sortedTracks.length; j++) {\r\n      let t = sortedTracks[j];\r\n      // If already checked, go to the next track\r\n      if (!t) continue;\r\n      // If reached the next artist, break\r\n      if (t.track.artists[0].name !== currentArtist) break;\r\n\r\n      // If found duplicate, add it to the results list\r\n      if (isSameSong(t.track.name, currentSong)) {\r\n        // Make sure the current track is added once\r\n        if (isFirstDuplicate) {\r\n          isFirstDuplicate = false;\r\n          currentDuplicateList.push(currentTrack);\r\n        }\r\n        currentDuplicateList.push(t);\r\n        // Remove track from list to avoid checking it again\r\n        sortedTracks[j] = null;\r\n      }\r\n    }\r\n\r\n    // If a set of duplicates was found, add that set to the result list\r\n    if (currentDuplicateList.length > 0) duplicates.push(currentDuplicateList);\r\n  }\r\n  return duplicates;\r\n};\r\n\r\n/**\r\n * Compare-function for sorting tracks by artist, then title.\r\n */\r\nfunction compareTracks(track1: Track, track2: Track): number {\r\n  let locale = \"en\";\r\n  let options = { sensitivity: \"base\" };\r\n  return (\r\n    2 *\r\n      track1.track.artists[0].name.localeCompare(\r\n        track2.track.artists[0].name,\r\n        locale,\r\n        options\r\n      ) +\r\n    1 * track1.track.name.localeCompare(track2.track.name, locale, options)\r\n  );\r\n}\r\n\r\n/**\r\n * Returns if the specified song names are similar enough to be interpreted as the same track.\r\n */\r\nfunction isSameSong(song1: string, song2: string) {\r\n  return compareTwoStrings(song1, song2) >= 0.8;\r\n}\r\n","export default interface Track {\r\n  added_at: string;\r\n  track: Info;\r\n  liked: boolean | undefined;\r\n  position: number | undefined;\r\n}\r\n\r\ninterface Info {\r\n  name: string;\r\n  id: string;\r\n  artists: Artist[];\r\n  album: Album;\r\n  duration_ms: number;\r\n  uri: string;\r\n}\r\n\r\ninterface Artist {\r\n  name: string;\r\n  id: string;\r\n}\r\n\r\ninterface Album {\r\n  name: string;\r\n}\r\n\r\nexport const getAddedAtDate = (track: Track): Date => {\r\n  return new Date(Date.parse(track.added_at));\r\n};\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n  })\r\n);\r\n\r\ninterface Props<T> {\r\n  items: T[];\r\n  isChecked: (index: number) => boolean;\r\n  handleToggle: (index: number) => void;\r\n  getContent: (item: T) => JSX.Element;\r\n  listItemClassName?: (index: number) => string;\r\n}\r\n\r\nexport default function CheckboxList<T>(props: Props<T>) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {props.items.map((item, index) => {\r\n        const labelId = `checkbox-list-label-${index}`;\r\n\r\n        return (\r\n          <ListItem\r\n            key={index}\r\n            role={undefined}\r\n            dense\r\n            button\r\n            divider\r\n            className={\r\n              props.listItemClassName && props.listItemClassName(index)\r\n            }\r\n            onClick={() => props.handleToggle(index)}\r\n          >\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={props.isChecked(index)}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ \"aria-labelledby\": labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            {props.getContent(item)}\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Favorite, FavoriteBorder } from \"@material-ui/icons\";\r\nimport Track, { getAddedAtDate } from \"../interfaces/Track\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n    liked: {\r\n      width: \"3%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      minWidth: theme.spacing(5),\r\n      paddingRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      width: \"37%\",\r\n      minWidth: theme.spacing(20),\r\n      paddingRight: theme.spacing(2),\r\n    },\r\n    artist: {\r\n      width: \"25%\",\r\n      minWidth: theme.spacing(15),\r\n      paddingRight: theme.spacing(2),\r\n    },\r\n    album: {\r\n      width: \"20%\",\r\n      minWidth: theme.spacing(15),\r\n      paddingRight: theme.spacing(2),\r\n    },\r\n    addedAt: {\r\n      width: \"10%\",\r\n      minWidth: theme.spacing(13),\r\n      paddingRight: theme.spacing(2),\r\n    },\r\n    duration: {\r\n      width: \"5%\",\r\n      minWidth: theme.spacing(5),\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n    },\r\n  })\r\n);\r\n\r\n/**\r\n * Formats the artists string.\r\n * Returns just the artist name if one, otherwise a list of the artists separated with \", \".\r\n *\r\n * @param track The track to get the artists from\r\n */\r\nfunction formatArtists(track: Track): string {\r\n  let result: string = \"\";\r\n  for (const artist of track.track.artists) {\r\n    if (result.length !== 0) result = result + \", \";\r\n    result = result + artist.name;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Formats the \"added at\" date like Spotify does.\r\n * Shows how many minutes/hours/days ago if recent, otherwise the full date.\r\n *\r\n * @param date The date that the track was added at\r\n */\r\nfunction formatAddedAt(date: Date): string {\r\n  let minutesSince = (Date.now() - date.getTime()) / (1000 * 60);\r\n  let roundedMinutesSince = Math.round(minutesSince);\r\n  if (roundedMinutesSince === 1) return \"a minute ago\";\r\n  if (roundedMinutesSince < 60) return roundedMinutesSince + \" minutes ago\";\r\n  let roundedHoursSince = Math.round(minutesSince / 60);\r\n  if (roundedHoursSince === 1) return \"an hour ago\";\r\n  if (roundedHoursSince < 24) return roundedHoursSince + \" hours ago\";\r\n\r\n  return (\r\n    date.getFullYear() +\r\n    \"-\" +\r\n    (\"0\" + (date.getMonth() + 1)).slice(-2) +\r\n    \"-\" +\r\n    (\"0\" + date.getDate()).slice(-2)\r\n  );\r\n}\r\n\r\n/**\r\n * Formats the song duration.\r\n *\r\n * @param durationMs The duration of the song in milliseconds\r\n */\r\nfunction formatDuration(durationMs: number): string {\r\n  let durationSec = Math.round(durationMs / 1000);\r\n  let hours = Math.floor(durationSec / (60 * 60));\r\n  let minutes = Math.floor((durationSec - hours * 3600) / 60);\r\n  let seconds = durationSec - hours * 3600 - minutes * 60;\r\n\r\n  let minutesString = (hours > 0 && minutes < 10 ? \"0\" : \"\") + minutes;\r\n  let secondsString = (seconds < 10 ? \"0\" : \"\") + seconds;\r\n\r\n  return (hours > 0 ? hours + \":\" : \"\") + minutesString + \":\" + secondsString;\r\n}\r\n\r\ninterface Props {\r\n  track: Track;\r\n}\r\n\r\nfunction TrackListItem(props: Props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.liked}>\r\n        {props.track.liked === undefined ? null : props.track.liked ? (\r\n          <Favorite fontSize=\"small\" />\r\n        ) : (\r\n          <FavoriteBorder fontSize=\"small\" />\r\n        )}\r\n      </div>\r\n      <div className={classes.title}>\r\n        <Typography noWrap>{props.track.track.name}</Typography>\r\n      </div>\r\n      <div className={classes.artist}>\r\n        <Typography noWrap>{formatArtists(props.track)}</Typography>\r\n      </div>\r\n      <div className={classes.album}>\r\n        <Typography noWrap>{props.track.track.album.name}</Typography>\r\n      </div>\r\n      <div className={classes.addedAt}>\r\n        <Typography noWrap>\r\n          {formatAddedAt(getAddedAtDate(props.track))}\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.duration}>\r\n        <Typography noWrap>\r\n          {formatDuration(props.track.track.duration_ms)}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackListItem;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport DelayedCircularProgress from \"./DelayedCircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  buttonProgress: {\r\n    position: \"absolute\",\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  loadingCondition: boolean;\r\n  color?: \"inherit\" | \"primary\" | \"secondary\" | \"default\";\r\n  variant?: \"text\" | \"outlined\" | \"contained\";\r\n  startIcon?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A button that displays a circular progress indicator (and is disabled) when the specified loadingCondition is true.\r\n */\r\nexport default function LoadingButton(props: Props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Button\r\n      color={props.color}\r\n      variant={props.variant}\r\n      startIcon={props.startIcon}\r\n      disabled={props.loadingCondition || props.disabled}\r\n      className={props.className}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n      {props.loadingCondition && (\r\n        <DelayedCircularProgress\r\n          className={classes.buttonProgress}\r\n          size={24}\r\n          wait={300}\r\n        />\r\n      )}\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Divider } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport Track, { getAddedAtDate } from \"../interfaces/Track\";\r\nimport CheckboxList from \"../components/utils/CheckboxList\";\r\nimport TrackListItem from \"./TrackListItem\";\r\nimport LoadingButton from \"./LoadingButton\";\r\nimport { removeSongsFromPlaylist } from \"../spotifyAPI/SpotifyAccess\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n    header: {\r\n      color: theme.palette.primary.main,\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      paddingLeft: theme.spacing(2),\r\n      height: theme.spacing(6),\r\n    },\r\n    button: {\r\n      margin: theme.spacing(1),\r\n      marginBottom: theme.spacing(10),\r\n    },\r\n    list: {\r\n      position: \"relative\",\r\n      //overflow: \"auto\",\r\n      //maxHeight: 600,\r\n      width: \"100%\",\r\n    },\r\n    checkedListItem: {\r\n      backgroundColor: theme.palette.secondary.main + \"08\",\r\n    },\r\n  })\r\n);\r\n\r\n/**\r\n * Returns the index of the newest added track from each duplicate set.\r\n *\r\n * @param duplicates The sets of duplicates to check\r\n */\r\nfunction getWorstDuplicates(duplicates: Track[][]): number[] {\r\n  let result: number[] = [];\r\n\r\n  let i = 0;\r\n  for (const tracks of duplicates) {\r\n    let bestDuplicateIndex = -1;\r\n    let bestAddedAtTime: number = Date.now();\r\n\r\n    for (const track of tracks) {\r\n      let addedAtTime = getAddedAtDate(track).getTime();\r\n\r\n      if (bestDuplicateIndex < 0) {\r\n        bestDuplicateIndex = i;\r\n        bestAddedAtTime = addedAtTime;\r\n      } else if (addedAtTime < bestAddedAtTime) {\r\n        result.push(bestDuplicateIndex);\r\n        bestDuplicateIndex = i;\r\n        bestAddedAtTime = addedAtTime;\r\n      } else {\r\n        result.push(i);\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a one-dimensional expanded version of a 2D list.\r\n *\r\n * @param list The list to get a 1D version of\r\n */\r\nfunction convert2DListTo1D<T>(list: T[][]): T[] {\r\n  let newList: T[] = [];\r\n  for (const sublist of list) {\r\n    newList.push(...sublist);\r\n  }\r\n  return newList;\r\n}\r\n\r\ninterface Props {\r\n  playlist: Playlist;\r\n  duplicates: Track[][];\r\n  duplicatesSnapshotId: string;\r\n}\r\n\r\n/**\r\n * List of duplicate tracks that can be removed.\r\n */\r\nconst DuplicateTracks: React.FC<Props> = (props) => {\r\n  const classes = useStyles();\r\n  const [tracks, setTracks] = useState<Track[]>(\r\n    convert2DListTo1D(props.duplicates)\r\n  );\r\n  const [checked, setChecked] = useState<number[]>(\r\n    getWorstDuplicates(props.duplicates)\r\n  );\r\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\r\n\r\n  const isChecked = (index: number): boolean => {\r\n    return checked.indexOf(index) !== -1;\r\n  };\r\n\r\n  const handleToggle = (index: number) => {\r\n    const currentIndex = checked.indexOf(index);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(index);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const deleteChecked = () => {\r\n    setDeleteLoading(true);\r\n\r\n    let tracksToRemove: Track[] = [];\r\n    let newTracks: Track[] = [];\r\n\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      let track = tracks[i];\r\n\r\n      if (isChecked(i)) {\r\n        tracksToRemove.push(track);\r\n      } else {\r\n        newTracks.push(track);\r\n      }\r\n    }\r\n\r\n    removeSongsFromPlaylist(\r\n      props.playlist,\r\n      tracksToRemove,\r\n      props.duplicatesSnapshotId\r\n    ).then((success) => {\r\n      setDeleteLoading(false);\r\n\r\n      if (success) {\r\n        setChecked([]);\r\n        setTracks(newTracks);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <h2>Found {props.duplicates.length} songs with duplicates:</h2>\r\n      </div>\r\n      <Divider />\r\n      <div className={classes.list}>\r\n        <CheckboxList<Track>\r\n          items={tracks}\r\n          isChecked={(index) => isChecked(index)}\r\n          handleToggle={handleToggle}\r\n          listItemClassName={(index) =>\r\n            isChecked(index) ? classes.checkedListItem : \"\"\r\n          }\r\n          getContent={(item) => <TrackListItem track={item} />}\r\n        />\r\n      </div>\r\n      <div>\r\n        <LoadingButton\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          className={classes.button}\r\n          startIcon={<Delete />}\r\n          disabled={checked.length === 0}\r\n          loadingCondition={deleteLoading}\r\n          onClick={() => deleteChecked()}\r\n        >\r\n          Delete ({checked.length})\r\n        </LoadingButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DuplicateTracks;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  getSong,\r\n  getTracks,\r\n  checkLikedTracks,\r\n  getPlaylist,\r\n} from \"../spotifyAPI/SpotifyAccess\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\nimport Track from \"../interfaces/Track\";\r\nimport Playlists from \"../components/Playlists\";\r\nimport { findDuplicateTracks } from \"../utils/PlaylistAlgorithms\";\r\nimport DuplicateTracks from \"../components/DuplicateTracks\";\r\nimport LoadingButton from \"../components/LoadingButton\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  app: {\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  content: {\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  sideBar: {\r\n    width: \"100%\",\r\n    maxWidth: theme.spacing(40),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst MainPage: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [song, setSong] = useState<string | null>(null);\r\n  const [playlist, setPlaylist] = useState<Playlist | null>(null);\r\n  const [duplicates, setDuplicates] = useState<Track[][] | null>(null);\r\n  const [duplicatesSnapshotId, setDuplicatesSnapshotId] = useState<\r\n    string | null\r\n  >(null);\r\n  const [findDuplicatesLoading, setFindDuplicatesLoading] = useState<boolean>(\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCurrentlyPlayingSong();\r\n  }, []);\r\n\r\n  const setCurrentlyPlayingSong = (): void => {\r\n    getSong().then((result) => {\r\n      setSong(result);\r\n    });\r\n  };\r\n\r\n  const onClickFindDuplicates = () => {\r\n    if (!playlist) return;\r\n\r\n    setFindDuplicatesLoading(true);\r\n    getTracks(playlist).then((data) => {\r\n      if (!data) {\r\n        setFindDuplicatesLoading(false);\r\n        return;\r\n      }\r\n      let tracks = data;\r\n\r\n      getPlaylist(playlist.id).then((data: Playlist | null) => {\r\n        if (!data) {\r\n          setFindDuplicatesLoading(false);\r\n          return;\r\n        }\r\n\r\n        let snapshotId = data.snapshot_id;\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n          tracks[i].position = i;\r\n        }\r\n\r\n        let duplicateTracks: Track[][] = findDuplicateTracks(tracks);\r\n\r\n        let tracksToCheckIfLiked: Track[] = [];\r\n        for (const duplicateSet of duplicateTracks) {\r\n          for (const t of duplicateSet) {\r\n            tracksToCheckIfLiked.push(t);\r\n          }\r\n        }\r\n\r\n        checkLikedTracks(tracksToCheckIfLiked).then((data) => {\r\n          setFindDuplicatesLoading(false);\r\n          if (!data) return;\r\n\r\n          for (let i = 0; i < data.length; i++) {\r\n            tracksToCheckIfLiked[i].liked = data[i];\r\n          }\r\n\r\n          setDuplicates(null); // Required to see updates after consequtive calls\r\n          setDuplicates(duplicateTracks);\r\n          setDuplicatesSnapshotId(snapshotId);\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.sideBar}>\r\n        <Playlists\r\n          onPlaylistSelected={(playlist, index) => {\r\n            setPlaylist(playlist);\r\n            setDuplicates(null);\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className={classes.app}>\r\n        {playlist ? (\r\n          <div>\r\n            <div className={classes.header}>\r\n              {playlist ? (\r\n                <div>\r\n                  <img\r\n                    height={300}\r\n                    src={playlist.images[0].url}\r\n                    alt={\"Playlist Cover\"}\r\n                  />\r\n                  <h1>{playlist.name}</h1>\r\n                </div>\r\n              ) : (\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              )}\r\n              <p />\r\n            </div>\r\n\r\n            <Divider variant=\"middle\" />\r\n\r\n            <div className={classes.content}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                className={classes.button}\r\n                onClick={setCurrentlyPlayingSong}\r\n              >\r\n                Show Current Song\r\n              </Button>\r\n              <LoadingButton\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className={classes.button}\r\n                loadingCondition={findDuplicatesLoading}\r\n                onClick={onClickFindDuplicates}\r\n              >\r\n                Find Duplicate Songs\r\n              </LoadingButton>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                className={classes.button}\r\n                onClick={() => console.log(playlist)}\r\n              >\r\n                Print Playlist\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                className={classes.button}\r\n                onClick={() =>\r\n                  getTracks(playlist).then((data) => console.log(data))\r\n                }\r\n              >\r\n                Print Tracks\r\n              </Button>\r\n\r\n              <h1>{song ? song : \"-No song is currently playing-\"}</h1>\r\n              <div>\r\n                {duplicates ? (\r\n                  <DuplicateTracks\r\n                    playlist={playlist}\r\n                    duplicates={duplicates}\r\n                    duplicatesSnapshotId={\r\n                      duplicatesSnapshotId\r\n                        ? duplicatesSnapshotId\r\n                        : playlist.snapshot_id\r\n                    }\r\n                  />\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.header}>\r\n            <h1>Select a playlist</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classes.sideBar} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\n\r\nconst LoadingPage: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { lightBlue, pink } from \"@material-ui/core/colors\";\r\n\r\nlet darkGrey = \"#121212\";\r\nlet mediumGrey = \"#181818\";\r\nlet lightGrey = \"#282828\";\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: mediumGrey,\r\n    },\r\n    primary: lightBlue,\r\n    secondary: pink,\r\n    grey: {\r\n      800: lightGrey,\r\n      900: darkGrey,\r\n    },\r\n  },\r\n});\r\n\r\nexport default darkTheme;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport LoadingPage from \"./pages/LoadingPage\";\nimport {\n  validateAccessToken,\n  startAccessTokenRefreshInterval,\n} from \"./spotifyAPI/AuthService\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport history from \"./utils/history\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport darkTheme from \"./themes/darkTheme\";\n\nfunction App() {\n  validateAccessToken();\n  startAccessTokenRefreshInterval();\n\n  return (\n    <div className=\"outerWrap\">\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <Router history={history}>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/\" exact component={MainPage} />\n              <Route path=\"/loading\" exact component={LoadingPage} />\n              <Route\n                path=\"/auth\"\n                exact\n                component={() => {\n                  validateAccessToken();\n                  return null;\n                }}\n              />\n            </Switch>\n          </div>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}