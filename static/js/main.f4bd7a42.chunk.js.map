{"version":3,"sources":["logo.svg","utils/history.tsx","spotifyAPI/AuthService.tsx","spotifyAPI/SpotifyAccess.tsx","components/VirtualizedList.tsx","pages/MainPage.tsx","pages/TestPage.tsx","pages/LoadingPage.tsx","themes/darkTheme.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","history","createHashHistory","cookies","Cookies","validateAccessToken","fetchAccessToken","accessToken","get","undefined","Promise","resolve","string","parsed","queryString","parse","window","location","search","access_token","refresh_token","expires_in","rest","searchRest","replaceState","href","replace","consumeSearchParams","stringify","hash","consumeAccessTokenParams","updateTokenCookies","generateNewAccessTokenFromSpotify","refreshAccessToken","refreshToken","console","log","fetch","refresh_token_uri","then","response","json","data","push","backend_uri","set","path","maxAge","expirationTime","minDurationBeforeRefresh","fetchFromSpotifyAPI","queryParams","promise","headers","Authorization","processResponse","statusCode","status","all","remove","renderRow","props","index","style","item","items","ListItem","button","key","selected","selectedIndex","onClick","onItemClick","ListItemText","primaryTypographyProps","noWrap","primary","getText","VirtualizedList","useState","setSelectedIndex","alreadySelected","onItemSelected","itemData","height","width","itemSize","itemCount","length","useStyles","makeStyles","theme","root","display","app","justifyContent","header","minHeight","sideBar","maxWidth","spacing","playlists","minWidth","margin","backgroundColor","palette","grey","MainPage","classes","song","setSong","playlist","setPlaylist","setPlaylists","useEffect","limit","offset","setCurrentlyPlayingSong","name","result","className","Paper","elevation","Box","src","images","url","logo","alt","Button","color","variant","TestPage","setItems","LoadingPage","darkTheme","createMuiTheme","type","background","default","lightBlue","secondary","green","800","900","App","setInterval","accessTokenRefreshInterval","ThemeProvider","CssBaseline","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4bd7a42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createHashHistory } from \"history\";\r\n\r\nconst history = createHashHistory();\r\nexport default history;\r\n\r\n/**\r\n * Removes the search params not present in the searchRest.\r\n * @param searchRest the rest string of the unconsumed search params\r\n */\r\nexport const consumeSearchParams = (searchRest: string): void => {\r\n  window.history.replaceState(\r\n    null,\r\n    \"\",\r\n    window.location.href.replace(\r\n      window.location.search,\r\n      (searchRest !== \"\" ? \"?\" : \"\") + searchRest\r\n    )\r\n  );\r\n};\r\n","import queryString from \"query-string\";\r\nimport Cookies from \"universal-cookie\";\r\nimport history, { consumeSearchParams } from \"../utils/history\";\r\n\r\nlet accessTokenRefreshInterval = 1; // Minutes\r\nlet minDurationBeforeRefresh = 15; // Minutes\r\nlet expirationTime = 60; // Minutes\r\n\r\nconst overrideUseProductionBackend = true;\r\nconst backend_uri =\r\n  process.env.NODE_ENV === \"production\" || overrideUseProductionBackend\r\n    ? \"https://spotify-u-backend.herokuapp.com\"\r\n    : \"http://localhost:8888\";\r\nlet authentication_uri = backend_uri + \"/login\";\r\nlet refresh_token_uri = backend_uri + \"/refresh_token\";\r\n\r\nlet accessTokenKey = \"access_token\";\r\nlet refreshTokenKey = \"refresh_token\";\r\nlet recentRefreshKey = \"recently_refreshed_access_token\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n/**\r\n * Starts an task to refresh the Spotify access token every 10 minutes;\r\n */\r\nexport const startAccessTokenRefreshInterval = (): void => {\r\n  refreshAccessToken();\r\n  window.setInterval(() => {\r\n    refreshAccessToken();\r\n  }, accessTokenRefreshInterval * 60 * 1000);\r\n};\r\n\r\n/**\r\n * Fetches a new access token from Spotify.\r\n */\r\nexport const validateAccessToken = (): void => {\r\n  fetchAccessToken();\r\n};\r\n\r\n/**\r\n * Returns a promise of an access token if one is found, otherwise generates a new one from Spotify.\r\n *\r\n * Access token search order:\r\n * 1. Cookie\r\n * 2. Parse from address field\r\n * 3. Generate new from Spotify\r\n */\r\nexport const fetchAccessToken = (): Promise<string> | null => {\r\n  // Get from cookie\r\n  let accessToken: string = cookies.get(accessTokenKey);\r\n  if (accessToken !== undefined) {\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Parse from address field\r\n  let parsed = consumeAccessTokenParams();\r\n  accessToken = parsed.access_token;\r\n  if (!isNullOrEmpty(accessToken)) {\r\n    // Add new cookie with the parsed access token\r\n    updateTokenCookies(accessToken, parsed.refresh_token);\r\n    return Promise.resolve(accessToken);\r\n  }\r\n\r\n  // Generate new from Spotify\r\n  generateNewAccessTokenFromSpotify();\r\n  return null;\r\n};\r\n\r\n/**\r\n * Generate new access token from Spotify.\r\n */\r\nexport const invalidateAccessToken = (): void => {\r\n  cookies.remove(accessTokenKey);\r\n  generateNewAccessTokenFromSpotify();\r\n};\r\n\r\n/**\r\n * Refreshes the access token by passing the refresh token to the backend.\r\n * Returns a promise of with the refreshed access token (the same access token\r\n * that the refresh token was originally generated for).\r\n */\r\nexport const refreshAccessToken = (): void => {\r\n  // Don't refresh again if done recently\r\n  if (cookies.get(recentRefreshKey) !== undefined) return;\r\n\r\n  let refreshToken = cookies.get(refreshTokenKey);\r\n  if (refreshToken === undefined) return;\r\n\r\n  console.log(\"Refreshing access token...\");\r\n\r\n  fetch(refresh_token_uri + \"?refresh_token=\" + refreshToken)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(\"Refreshed access token\");\r\n\r\n      let accessToken = data.access_token;\r\n      updateTokenCookies(accessToken, refreshToken);\r\n    });\r\n};\r\n\r\n/**\r\n * Generates a new access token by redirecting to Spotify's authentication page.\r\n */\r\nfunction generateNewAccessTokenFromSpotify(): void {\r\n  history.push(\"/loading\");\r\n  window.location.replace(authentication_uri);\r\n}\r\n\r\ninterface AccessTokenParams {\r\n  access_token: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n}\r\n\r\n/**\r\n * Returns the access token parsed from the address field.\r\n */\r\nfunction consumeAccessTokenParams(): AccessTokenParams {\r\n  let { access_token, refresh_token, expires_in, ...rest } = queryString.parse(\r\n    window.location.search\r\n  );\r\n  consumeSearchParams(queryString.stringify(rest));\r\n  // Remove the hash that is sometimes appended on the callback\r\n  window.location.hash = window.location.hash.replace(\"_=_\", \"\");\r\n  return {\r\n    access_token: access_token as string,\r\n    expires_in: (expires_in as unknown) as number,\r\n    refresh_token: refresh_token as string,\r\n  };\r\n}\r\n\r\n/**\r\n * Updates the access/refresh token values stored in the cookies.\r\n *\r\n * @param accessToken The access token value to set\r\n * @param refreshToken The refresh token value to set\r\n */\r\nfunction updateTokenCookies(accessToken: string, refreshToken: string): void {\r\n  cookies.set(accessTokenKey, accessToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(refreshTokenKey, refreshToken, {\r\n    path: \"/\",\r\n    maxAge: expirationTime * 60,\r\n  });\r\n  cookies.set(recentRefreshKey, \"\", {\r\n    path: \"/\",\r\n    maxAge: minDurationBeforeRefresh * 60,\r\n  });\r\n}\r\n\r\n/**\r\n * Returns if the specified string is undefined, null or empty.\r\n *\r\n * @param string The string to check\r\n */\r\nfunction isNullOrEmpty(string: string): boolean {\r\n  return string === undefined || string === null || string === \"\";\r\n}\r\n","import { fetchAccessToken, invalidateAccessToken } from \"./AuthService\";\r\nimport queryString from \"query-string\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\n\r\n/**\r\n * Returns the currently playing song, or null.\r\n */\r\nexport const getSong = (): Promise<string | null> => {\r\n  return fetchFromSpotifyAPI(\"me/player/currently-playing\").then((data) => {\r\n    if (!data || !data.item) return null;\r\n    return data.item.name;\r\n  });\r\n};\r\n\r\n/**\r\n * Get a list of the playlists owned or followed by the Spotify user.\r\n *\r\n * @param limit The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.\r\n * @param offset The index of the first playlist to return. Default: 0 (the first object).\r\n * Maximum offset: 100.000. Use with limit to get the next set of playlists.\r\n */\r\nexport const getPlaylists = (\r\n  limit?: number,\r\n  offset?: number\r\n): Promise<{ items: Playlist[] } | null> => {\r\n  return fetchFromSpotifyAPI(\"me/playlists\", {\r\n    limit: limit,\r\n    offset: offset,\r\n  }).then((data) => {\r\n    if (!data) return null;\r\n    return data;\r\n  });\r\n};\r\n\r\nfunction fetchFromSpotifyAPI(\r\n  path: string,\r\n  queryParams?: object\r\n): Promise<any | null> {\r\n  let promise = fetchAccessToken();\r\n  if (promise === null) return Promise.resolve(null);\r\n\r\n  return promise\r\n    .then((accessToken) => {\r\n      return fetch(\r\n        \"https://api.spotify.com/v1/\" +\r\n          path +\r\n          (queryParams ? \"?\" + queryString.stringify(queryParams) : \"\"),\r\n        {\r\n          headers: { Authorization: \"Bearer \" + accessToken },\r\n        }\r\n      );\r\n    })\r\n    .then(processResponse);\r\n}\r\n\r\nfunction processResponse(response: {\r\n  status: any;\r\n  json: () => any;\r\n}): Promise<any | null> {\r\n  const statusCode = response.status;\r\n  if (statusCode === 204) return Promise.resolve(null);\r\n  const data = response.json();\r\n  return Promise.all([statusCode, data]).then(([statusCode, data]) => {\r\n    if (statusCode === 401) {\r\n      // Invalid access token\r\n      invalidateAccessToken();\r\n      return null;\r\n    }\r\n\r\n    return statusCode === 200 ? data : null;\r\n  });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { FixedSizeList } from \"react-window\";\r\n\r\ninterface Item {\r\n  name: string;\r\n}\r\n\r\ninterface RowProps<T> {\r\n  index: number;\r\n  style: React.CSSProperties | undefined;\r\n  data: {\r\n    selectedIndex: number;\r\n    onItemClick: (item: T, index: number) => void;\r\n    items: T[];\r\n    getText(t: T): string;\r\n  };\r\n}\r\n\r\nfunction renderRow<T>(props: RowProps<T>) {\r\n  const { index, style } = props;\r\n  const item = props.data.items[index];\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      style={style}\r\n      key={index}\r\n      selected={props.data.selectedIndex === index}\r\n      onClick={() => {\r\n        if (props.data.onItemClick) props.data.onItemClick(item, index);\r\n      }}\r\n    >\r\n      <ListItemText\r\n        primaryTypographyProps={{ noWrap: true }}\r\n        primary={props.data.getText(item)}\r\n      />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\ninterface Props<T> {\r\n  height: number;\r\n  itemSize: number;\r\n  items: T[];\r\n  getText(t: T): string;\r\n  onItemSelected: (item: T, index: number) => void;\r\n  onItemClick?: (item: T, index: number) => void;\r\n}\r\n\r\nfunction VirtualizedList<T>(props: Props<T>) {\r\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n\r\n  const onItemClick = (item: T, index: number) => {\r\n    let alreadySelected = index === selectedIndex;\r\n    setSelectedIndex(index);\r\n    if (props.onItemClick) props.onItemClick(item, index);\r\n    if (!alreadySelected && props.onItemSelected)\r\n      props.onItemSelected(item, index);\r\n  };\r\n\r\n  const data = {\r\n    selectedIndex: selectedIndex,\r\n    onItemClick: onItemClick,\r\n    items: props.items,\r\n    getText: props.getText,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FixedSizeList\r\n        itemData={data}\r\n        height={props.height}\r\n        width={\"100%\"}\r\n        itemSize={props.itemSize}\r\n        itemCount={data.items.length}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VirtualizedList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getSong, getPlaylists } from \"../spotifyAPI/SpotifyAccess\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport VirtualizedList from \"../components/VirtualizedList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Playlist from \"../interfaces/Playlist\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  app: {\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    minHeight: 400,\r\n  },\r\n  sideBar: {\r\n    width: \"100%\",\r\n    maxWidth: theme.spacing(40),\r\n  },\r\n  playlists: {\r\n    minWidth: theme.spacing(22),\r\n    margin: theme.spacing(3),\r\n    backgroundColor: theme.palette.grey[900],\r\n  },\r\n}));\r\n\r\nconst MainPage: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [song, setSong] = useState<string | null>(null);\r\n  const [playlist, setPlaylist] = useState<Playlist | null>(null);\r\n  const [playlists, setPlaylists] = useState<Playlist[]>([]);\r\n\r\n  useEffect(() => {\r\n    getPlaylists(20, 0).then((data) => {\r\n      if (!data) return;\r\n      setPlaylists(data.items);\r\n    });\r\n    setCurrentlyPlayingSong();\r\n  }, []);\r\n\r\n  const setCurrentlyPlayingSong = (): void => {\r\n    getSong().then((result) => {\r\n      setSong(result);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.sideBar}>\r\n        <Paper elevation={3} className={classes.playlists}>\r\n          <VirtualizedList\r\n            height={600}\r\n            itemSize={46}\r\n            items={playlists}\r\n            getText={(playlist: Playlist) => playlist.name}\r\n            onItemSelected={(playlist, index) => {\r\n              setPlaylist(playlist);\r\n            }}\r\n          />\r\n        </Paper>\r\n      </div>\r\n\r\n      <div className={classes.app}>\r\n        <Box className={classes.header}>\r\n          {playlist ? (\r\n            <div>\r\n              <img height={300} src={playlist.images[0].url} />\r\n              <h1>{playlist.name}</h1>\r\n            </div>\r\n          ) : (\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          )}\r\n          <p />\r\n        </Box>\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          onClick={setCurrentlyPlayingSong}\r\n        >\r\n          Show Current Song\r\n        </Button>\r\n\r\n        <h1>{song ? song : \"-No song is currently playing-\"}</h1>\r\n      </div>\r\n      <div className={classes.sideBar} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React, { useState } from \"react\";\r\nimport \"../App.scss\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport VirtualizedList from \"../components/VirtualizedList\";\r\n\r\nconst TestPage: React.FC = () => {\r\n  const [items, setItems] = useState([{ name: \"AAA\" }, { name: \"BBB\" }]);\r\n\r\n  const addItem = () => {\r\n    setItems((items) => [...items, { name: \"CCC\" + (items.length + 1) }]);\r\n    console.log(\"added CCC \" + (items.length + 1));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Test Page</h1>\r\n      <Button color=\"primary\" variant=\"outlined\" onClick={addItem}>\r\n        Add Item\r\n      </Button>\r\n      <VirtualizedList\r\n        height={400}\r\n        itemSize={46}\r\n        items={items}\r\n        getText={(item: { name: string }) => item.name}\r\n        onItemSelected={(playlist, index) =>\r\n          console.log(\"Selected item:\", playlist.name)\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestPage;\r\n","import React from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport \"../App.scss\";\r\n\r\nconst LoadingPage: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport { lightBlue } from \"@material-ui/core/colors\";\r\n\r\nlet darkGrey = \"#121212\";\r\nlet mediumGrey = \"#181818\";\r\nlet lightGrey = \"#282828\";\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: mediumGrey,\r\n    },\r\n    primary: lightBlue,\r\n    secondary: green,\r\n    grey: {\r\n      800: lightGrey,\r\n      900: darkGrey,\r\n    },\r\n  },\r\n});\r\n\r\nexport default darkTheme;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport TestPage from \"./pages/TestPage\";\nimport LoadingPage from \"./pages/LoadingPage\";\nimport {\n  validateAccessToken,\n  startAccessTokenRefreshInterval,\n} from \"./spotifyAPI/AuthService\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport history from \"./utils/history\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport darkTheme from \"./themes/darkTheme\";\n\nfunction App() {\n  validateAccessToken();\n  startAccessTokenRefreshInterval();\n\n  return (\n    <div className=\"outerWrap\">\n      <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <Router history={history}>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/\" exact component={MainPage} />\n              <Route path=\"/test\" exact component={TestPage} />\n              <Route path=\"/loading\" exact component={LoadingPage} />\n              <Route\n                path=\"/auth\"\n                exact\n                component={() => {\n                  validateAccessToken();\n                  return null;\n                }}\n              />\n            </Switch>\n          </div>\n        </Router>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}